// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render successfully 1`] = `
<View
  style={
    Object {
      "alignItems": "stretch",
      "backgroundColor": "white",
      "flex": 1,
      "justifyContent": "space-evenly",
    }
  }
>
  <RCTScrollView
    ItemSeparatorComponent={[Function]}
    data={
      Array [
        Object {
          "book": "JavaScript",
          "details": Array [
            Object {
              "id": 1,
              "title": "<javascript example>",
            },
            Object {
              "id": 2,
              "title": "\`await\` suspends the current *function* evaluations, including all control structures. 
                    
                    therefore in \`.forEach\` it does not wait for callback to finish before iterating to next.
                    
                    https://stackoverflow.com/questions/37576685/using-async-await-with-a-foreach-loop",
            },
            Object {
              "id": 3,
              "title": "# This is Heading 1{'

'}
                            ## This is Heading 2{'

'}
                            1. List1 {'
'}
                            2. List2 {'
'} 
                            {'	'}1. sublist1{'
'}
                            {'	'}description sublist1.{'
'}
                            {'	'}2. sublist2{'		'}{'
'}
                            * List3{'
'}
                            * List4{'
'}
                            {'	'}1. **bold text** {'
'}
                            {'	'}2. this line contain * and should not be a new sublist{'		'}{'
'}
                            5.  Last list{'

'}
                            Some *really* basic **Markdown**.{'

'}


                            ## this is header {'



'}
                            {'this is _italic_ '}
                            {'this is **strong**'}

                            {'

'}
                            | # | Name   | Age |{'
'}
                            |---|--------|-----|{'
'}
                            | 1 | John   | 19  |{'
'}
                            | 2 | Sally  | 18  |{'
'}
                            | 3 | Stream | 20  |{'
'}",
            },
          ],
        },
        Object {
          "book": "Linux",
          "details": Array [
            Object {
              "id": 1,
              "title": "linux example",
            },
          ],
        },
        Object {
          "book": "Wisdom",
          "details": Array [
            Object {
              "id": 1,
              "title": "wisodom example",
            },
          ],
        },
        Object {
          "book": "Vocabulary",
          "details": Array [
            Object {
              "id": 1,
              "title": "vocabulary example",
            },
          ],
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          isTVSelectable={true}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={null}
        >
          <View
            style={
              Object {
                "alignItems": "flex-start",
                "flexDirection": "row",
                "flexWrap": "wrap",
              }
            }
          >
            <Text
              allowFontScaling={false}
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 18,
                  },
                  Object {
                    "paddingBottom": 12,
                    "paddingLeft": 15,
                    "paddingRight": 15,
                    "paddingTop": 16,
                  },
                  Object {
                    "fontFamily": "Ionicons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  Object {},
                ]
              }
            >
              
            </Text>
            <Text
              style={
                Object {
                  "color": "black",
                  "fontSize": 16,
                  "fontWeight": "bold",
                  "paddingBottom": 15,
                  "paddingTop": 15,
                }
              }
            >
              JavaScript
            </Text>
          </View>
        </View>
        <View
          style={
            Object {
              "backgroundColor": "#CED0CE",
              "height": 1,
              "marginLeft": 15,
              "width": "100%",
            }
          }
        />
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          isTVSelectable={true}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={null}
        >
          <View
            style={
              Object {
                "alignItems": "flex-start",
                "flexDirection": "row",
                "flexWrap": "wrap",
              }
            }
          >
            <Text
              allowFontScaling={false}
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 18,
                  },
                  Object {
                    "paddingBottom": 12,
                    "paddingLeft": 15,
                    "paddingRight": 15,
                    "paddingTop": 16,
                  },
                  Object {
                    "fontFamily": "Ionicons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  Object {},
                ]
              }
            >
              
            </Text>
            <Text
              style={
                Object {
                  "color": "black",
                  "fontSize": 16,
                  "fontWeight": "bold",
                  "paddingBottom": 15,
                  "paddingTop": 15,
                }
              }
            >
              Linux
            </Text>
          </View>
        </View>
        <View
          style={
            Object {
              "backgroundColor": "#CED0CE",
              "height": 1,
              "marginLeft": 15,
              "width": "100%",
            }
          }
        />
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          isTVSelectable={true}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={null}
        >
          <View
            style={
              Object {
                "alignItems": "flex-start",
                "flexDirection": "row",
                "flexWrap": "wrap",
              }
            }
          >
            <Text
              allowFontScaling={false}
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 18,
                  },
                  Object {
                    "paddingBottom": 12,
                    "paddingLeft": 15,
                    "paddingRight": 15,
                    "paddingTop": 16,
                  },
                  Object {
                    "fontFamily": "Ionicons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  Object {},
                ]
              }
            >
              
            </Text>
            <Text
              style={
                Object {
                  "color": "black",
                  "fontSize": 16,
                  "fontWeight": "bold",
                  "paddingBottom": 15,
                  "paddingTop": 15,
                }
              }
            >
              Wisdom
            </Text>
          </View>
        </View>
        <View
          style={
            Object {
              "backgroundColor": "#CED0CE",
              "height": 1,
              "marginLeft": 15,
              "width": "100%",
            }
          }
        />
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          isTVSelectable={true}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={null}
        >
          <View
            style={
              Object {
                "alignItems": "flex-start",
                "flexDirection": "row",
                "flexWrap": "wrap",
              }
            }
          >
            <Text
              allowFontScaling={false}
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 18,
                  },
                  Object {
                    "paddingBottom": 12,
                    "paddingLeft": 15,
                    "paddingRight": 15,
                    "paddingTop": 16,
                  },
                  Object {
                    "fontFamily": "Ionicons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  Object {},
                ]
              }
            >
              
            </Text>
            <Text
              style={
                Object {
                  "color": "black",
                  "fontSize": 16,
                  "fontWeight": "bold",
                  "paddingBottom": 15,
                  "paddingTop": 15,
                }
              }
            >
              Vocabulary
            </Text>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
